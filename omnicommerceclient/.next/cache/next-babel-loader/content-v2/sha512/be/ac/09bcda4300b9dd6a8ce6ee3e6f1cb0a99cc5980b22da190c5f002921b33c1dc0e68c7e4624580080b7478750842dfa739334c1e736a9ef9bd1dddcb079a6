{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"E:/OmniCommerce/omnicommerceclient/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/OmniCommerce/omnicommerceclient/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/OmniCommerce/omnicommerceclient/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\OmniCommerce\\\\omnicommerceclient\\\\src\\\\pages\\\\register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button } from \"@chakra-ui/button\";\nimport { Formik, Form } from \"formik\";\nimport React from \"react\";\nimport { useMutation } from \"urql\";\nimport { InputField } from \"../components/InputField\";\nimport Wrapper from \"../components/Wrapper\";\n\nvar register = function register() {\n  _s();\n\n  var _useMutation = useMutation(\"\\n  mutation Register($username:String!,$password:String!){\\n    login(options:{username:$username,password:$password}){\\n      errors{\\n        field\\n        message\\n      }\\n      user{\\n        username\\n      }\\n    }\\n  }\\n  \"),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      register = _useMutation2[1];\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: \"\",\n        password: \"\"\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return register(values);\n\n                case 2:\n                  return _context.abrupt(\"return\", _context.sent);\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref2) {\n        var isSubmitting = _ref2.isSubmitting;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"username\",\n            placeholder: \"Username\",\n            label: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"password\",\n            placeholder: \"Password\",\n            label: \"Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            my: 4,\n            type: \"submit\",\n            variant: \"outline\",\n            color: \"white\",\n            background: \"teal.400\",\n            _hover: {\n              bg: \"teal.600\"\n            },\n            verticalAlign: \"middle\",\n            isLoading: isSubmitting,\n            children: \"REGISTER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(register, \"7CEe8jaeeKkSxBnlwahqPb7e3aI=\", false, function () {\n  return [useMutation];\n});\n\nexport default register;","map":{"version":3,"sources":["E:/OmniCommerce/omnicommerceclient/src/pages/register.tsx"],"names":["Button","Formik","Form","React","useMutation","InputField","Wrapper","register","username","password","values","isSubmitting","bg"],"mappings":";;;;;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,MAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,OAAP,MAAoB,uBAApB;;AAIA,IAAMC,QAAiC,GAAG,oBAAM;AAAA;;AAAA,qBACzBH,WAAW,4OADc;AAAA;AAAA,MACrCG,QADqC;;AAc9C,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEC,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,QAAQ,EAAE;AAA1B,OADjB;AAEE,MAAA,QAAQ;AAAA,4EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACKH,QAAQ,CAACG,MAAD,CADb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;AAAA,SAFV;AAAA,gBAMG;AAAA,YAAGC,YAAH,SAAGA,YAAH;AAAA,4BACC,QAAC,IAAD;AAAA,kCACE,QAAC,UAAD;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,WAAW,EAAC,UAFd;AAGE,YAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,mBADF,eAME,QAAC,UAAD;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,WAAW,EAAC,UAFd;AAGE,YAAA,KAAK,EAAC,UAHR;AAIE,YAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,mBANF,eAYE,QAAC,MAAD;AACE,YAAA,EAAE,EAAE,CADN;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,OAAO,EAAC,SAHV;AAIE,YAAA,KAAK,EAAC,OAJR;AAKE,YAAA,UAAU,EAAC,UALb;AAME,YAAA,MAAM,EAAE;AAAEC,cAAAA,EAAE,EAAE;AAAN,aANV;AAOE,YAAA,aAAa,EAAC,QAPhB;AAQE,YAAA,SAAS,EAAED,YARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD;AAAA;AANH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAsCD,CApDD;;GAAMJ,Q;UACiBH,W;;;AAqDvB,eAAeG,QAAf","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { Formik, Form } from \"formik\";\r\nimport React from \"react\";\r\nimport { useMutation } from \"urql\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport Wrapper from \"../components/Wrapper\";\r\n\r\ninterface registerProps {}\r\n\r\nconst register: React.FC<registerProps> = () => {\r\n  const [, register] = useMutation(`\r\n  mutation Register($username:String!,$password:String!){\r\n    login(options:{username:$username,password:$password}){\r\n      errors{\r\n        field\r\n        message\r\n      }\r\n      user{\r\n        username\r\n      }\r\n    }\r\n  }\r\n  `);\r\n  return (\r\n    <Wrapper variant=\"small\">\r\n      <Formik\r\n        initialValues={{ username: \"\", password: \"\" }}\r\n        onSubmit={async (values) => {\r\n          return await register(values);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField\r\n              name=\"username\"\r\n              placeholder=\"Username\"\r\n              label=\"Username\"\r\n            />\r\n            <InputField\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n            />\r\n            <Button\r\n              my={4}\r\n              type=\"submit\"\r\n              variant=\"outline\"\r\n              color=\"white\"\r\n              background=\"teal.400\"\r\n              _hover={{ bg: \"teal.600\" }}\r\n              verticalAlign=\"middle\"\r\n              isLoading={isSubmitting}\r\n            >\r\n              REGISTER\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default register;\r\n"]},"metadata":{},"sourceType":"module"}