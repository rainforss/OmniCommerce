{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\OmniCommerce\\\\omnicommerceclient\\\\src\\\\pages\\\\register.tsx\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Formik, Form } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport Wrapper from \"../components/Wrapper\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\n\nconst register = () => {\n  const [, register] = useRegisterMutation();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: \"\",\n        password: \"\"\n      },\n      onSubmit: async (values, actions) => {\n        var _response$data;\n\n        const response = await register(values);\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n          actions.setErrors(toErrorMap(response.data.register.errors));\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          name: \"username\",\n          placeholder: \"Username\",\n          label: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InputField, {\n          name: \"password\",\n          placeholder: \"Password\",\n          label: \"Password\",\n          type: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          my: 4,\n          type: \"submit\",\n          variant: \"outline\",\n          color: \"white\",\n          background: \"teal.400\",\n          _hover: {\n            bg: \"teal.600\"\n          },\n          verticalAlign: \"middle\",\n          isLoading: isSubmitting,\n          children: \"REGISTER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\nexport default register;","map":{"version":3,"sources":["E:/OmniCommerce/omnicommerceclient/src/pages/register.tsx"],"names":["Button","Formik","Form","React","InputField","Wrapper","useRegisterMutation","toErrorMap","register","username","password","values","actions","response","data","errors","setErrors","isSubmitting","bg"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAIA,MAAMC,QAAiC,GAAG,MAAM;AAC9C,QAAM,GAAGA,QAAH,IAAeF,mBAAmB,EAAxC;AACA,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEG,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,QAAQ,EAAE;AAA1B,OADjB;AAEE,MAAA,QAAQ,EAAE,OAAOC,MAAP,EAAeC,OAAf,KAA2B;AAAA;;AACnC,cAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACG,MAAD,CAA/B;;AACA,8BAAIE,QAAQ,CAACC,IAAb,2CAAI,eAAeN,QAAf,CAAwBO,MAA5B,EAAoC;AAClCH,UAAAA,OAAO,CAACI,SAAR,CAAkBT,UAAU,CAACM,QAAQ,CAACC,IAAT,CAAcN,QAAd,CAAuBO,MAAxB,CAA5B;AACD;AACF,OAPH;AAAA,gBASG,CAAC;AAAEE,QAAAA;AAAF,OAAD,kBACC,QAAC,IAAD;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,UAFd;AAGE,UAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,UAAD;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,WAAW,EAAC,UAFd;AAGE,UAAA,KAAK,EAAC,UAHR;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBANF,eAYE,QAAC,MAAD;AACE,UAAA,EAAE,EAAE,CADN;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,OAAO,EAAC,SAHV;AAIE,UAAA,KAAK,EAAC,OAJR;AAKE,UAAA,UAAU,EAAC,UALb;AAME,UAAA,MAAM,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN,WANV;AAOE,UAAA,aAAa,EAAC,QAPhB;AAQE,UAAA,SAAS,EAAED,YARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD,CA3CD;;AA6CA,eAAeT,QAAf","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { Formik, Form } from \"formik\";\r\nimport React from \"react\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport Wrapper from \"../components/Wrapper\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\nimport { toErrorMap } from \"../utils/toErrorMap\";\r\n\r\ninterface registerProps {}\r\n\r\nconst register: React.FC<registerProps> = () => {\r\n  const [, register] = useRegisterMutation();\r\n  return (\r\n    <Wrapper variant=\"small\">\r\n      <Formik\r\n        initialValues={{ username: \"\", password: \"\" }}\r\n        onSubmit={async (values, actions) => {\r\n          const response = await register(values);\r\n          if (response.data?.register.errors) {\r\n            actions.setErrors(toErrorMap(response.data.register.errors));\r\n          }\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField\r\n              name=\"username\"\r\n              placeholder=\"Username\"\r\n              label=\"Username\"\r\n            />\r\n            <InputField\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n            />\r\n            <Button\r\n              my={4}\r\n              type=\"submit\"\r\n              variant=\"outline\"\r\n              color=\"white\"\r\n              background=\"teal.400\"\r\n              _hover={{ bg: \"teal.600\" }}\r\n              verticalAlign=\"middle\"\r\n              isLoading={isSubmitting}\r\n            >\r\n              REGISTER\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default register;\r\n"]},"metadata":{},"sourceType":"module"}